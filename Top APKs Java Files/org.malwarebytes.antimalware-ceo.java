import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Process;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.malwarebytes.antimalware.appmanager.common.model.object.AmApp;
import org.malwarebytes.antimalware.common.util.AndroidUtils;

public class ceo
{
  public static List<PackageInfo> a(Context paramContext)
  {
    if (paramContext == null) {
      return new ArrayList();
    }
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = a(paramContext, 0);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return new ArrayList();
  }
  
  public static List<AmApp> a(Context paramContext, List<AmApp> paramList)
  {
    ArrayList localArrayList = new ArrayList();
    cew.a("ApplicationUtils", "getRunningProcesses", "allApplications size: " + paramList.size());
    paramContext = bfq.a(paramContext).iterator();
    if (paramContext.hasNext())
    {
      ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)paramContext.next();
      Iterator localIterator = paramList.iterator();
      label76:
      AmApp localAmApp;
      for (;;)
      {
        if (localIterator.hasNext())
        {
          localAmApp = (AmApp)localIterator.next();
          if (localRunningAppProcessInfo.processName.equals(localAmApp.g()))
          {
            if (!AndroidUtils.b()) {
              break label233;
            }
            if (!localArrayList.contains(localAmApp))
            {
              localAmApp.a(localRunningAppProcessInfo.pid);
              localArrayList.add(localAmApp);
            }
          }
        }
      }
      for (;;)
      {
        cew.a("ApplicationUtils", "getRunningProcesses2", "runningProcess.processName.equals(application.getPackageName()) PASSED\nrunningProcess.processName = " + localRunningAppProcessInfo.processName + "\n" + "application.getPackageName() = " + localAmApp.g() + "\n" + "runningProcess.pid = " + localRunningAppProcessInfo.pid + "\n" + localAmApp.i() + " is added to runningApplications list\n");
        break label76;
        break;
        label233:
        localAmApp.a(localRunningAppProcessInfo.pid);
        localArrayList.add(localAmApp);
      }
    }
    Collections.sort(localArrayList);
    return localArrayList;
  }
  
  /* Error */
  private static List<PackageInfo> a(PackageManager paramPackageManager, int paramInt)
  {
    // Byte code:
    //   0: ldc 36
    //   2: ldc -113
    //   4: invokestatic 146	cew:a	(Ljava/lang/String;Ljava/lang/String;)V
    //   7: aload_0
    //   8: iload_1
    //   9: invokevirtual 151	android/content/pm/PackageManager:getInstalledPackages	(I)Ljava/util/List;
    //   12: astore_2
    //   13: aload_2
    //   14: areturn
    //   15: astore_2
    //   16: aload_2
    //   17: invokevirtual 31	java/lang/Exception:printStackTrace	()V
    //   20: new 15	java/util/ArrayList
    //   23: dup
    //   24: invokespecial 19	java/util/ArrayList:<init>	()V
    //   27: astore 4
    //   29: aconst_null
    //   30: astore_2
    //   31: invokestatic 157	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   34: ldc -97
    //   36: invokevirtual 163	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   39: astore 5
    //   41: new 165	java/io/BufferedReader
    //   44: dup
    //   45: new 167	java/io/InputStreamReader
    //   48: dup
    //   49: aload 5
    //   51: invokevirtual 173	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   54: invokespecial 176	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   57: invokespecial 179	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   60: astore_3
    //   61: aload_3
    //   62: astore_2
    //   63: aload_3
    //   64: invokevirtual 182	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   67: astore 6
    //   69: aload 6
    //   71: ifnull +65 -> 136
    //   74: aload_3
    //   75: astore_2
    //   76: aload 4
    //   78: aload_0
    //   79: aload 6
    //   81: aload 6
    //   83: bipush 58
    //   85: invokevirtual 186	java/lang/String:indexOf	(I)I
    //   88: iconst_1
    //   89: iadd
    //   90: invokevirtual 190	java/lang/String:substring	(I)Ljava/lang/String;
    //   93: iload_1
    //   94: invokevirtual 194	android/content/pm/PackageManager:getPackageInfo	(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    //   97: invokeinterface 117 2 0
    //   102: pop
    //   103: goto -42 -> 61
    //   106: astore_2
    //   107: aload_3
    //   108: astore_0
    //   109: aload_2
    //   110: astore_3
    //   111: aload_0
    //   112: astore_2
    //   113: aload_3
    //   114: invokevirtual 31	java/lang/Exception:printStackTrace	()V
    //   117: aload_0
    //   118: ifnull +7 -> 125
    //   121: aload_0
    //   122: invokevirtual 197	java/io/BufferedReader:close	()V
    //   125: aload 4
    //   127: invokestatic 202	cep:a	()Ljava/util/Comparator;
    //   130: invokestatic 205	java/util/Collections:sort	(Ljava/util/List;Ljava/util/Comparator;)V
    //   133: aload 4
    //   135: areturn
    //   136: aload_3
    //   137: astore_2
    //   138: aload 5
    //   140: invokevirtual 208	java/lang/Process:waitFor	()I
    //   143: pop
    //   144: aload_3
    //   145: ifnull -20 -> 125
    //   148: aload_3
    //   149: invokevirtual 197	java/io/BufferedReader:close	()V
    //   152: goto -27 -> 125
    //   155: astore_0
    //   156: aload_0
    //   157: invokevirtual 209	java/io/IOException:printStackTrace	()V
    //   160: goto -35 -> 125
    //   163: astore_0
    //   164: aload_0
    //   165: invokevirtual 209	java/io/IOException:printStackTrace	()V
    //   168: goto -43 -> 125
    //   171: astore_0
    //   172: aload_2
    //   173: ifnull +7 -> 180
    //   176: aload_2
    //   177: invokevirtual 197	java/io/BufferedReader:close	()V
    //   180: aload_0
    //   181: athrow
    //   182: astore_2
    //   183: aload_2
    //   184: invokevirtual 209	java/io/IOException:printStackTrace	()V
    //   187: goto -7 -> 180
    //   190: astore_0
    //   191: goto -19 -> 172
    //   194: astore_3
    //   195: aconst_null
    //   196: astore_0
    //   197: goto -86 -> 111
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	200	0	paramPackageManager	PackageManager
    //   0	200	1	paramInt	int
    //   12	2	2	localList	List
    //   15	2	2	localException1	Exception
    //   30	46	2	localObject1	Object
    //   106	4	2	localException2	Exception
    //   112	65	2	localObject2	Object
    //   182	2	2	localIOException	java.io.IOException
    //   60	89	3	localObject3	Object
    //   194	1	3	localException3	Exception
    //   27	107	4	localArrayList	ArrayList
    //   39	100	5	localProcess	Process
    //   67	15	6	str	String
    // Exception table:
    //   from	to	target	type
    //   7	13	15	java/lang/Exception
    //   63	69	106	java/lang/Exception
    //   76	103	106	java/lang/Exception
    //   138	144	106	java/lang/Exception
    //   148	152	155	java/io/IOException
    //   121	125	163	java/io/IOException
    //   31	61	171	finally
    //   176	180	182	java/io/IOException
    //   63	69	190	finally
    //   76	103	190	finally
    //   113	117	190	finally
    //   138	144	190	finally
    //   31	61	194	java/lang/Exception
  }
  
  public static List<AmApp> a(PackageManager paramPackageManager, boolean paramBoolean)
  {
    cew.a("ApplicationUtils", "getAllPackages");
    ArrayList localArrayList = new ArrayList();
    if (paramPackageManager != null) {
      try
      {
        Object localObject = a(paramPackageManager, 0);
        localObject = ((List)localObject).iterator();
        while (((Iterator)localObject).hasNext())
        {
          PackageInfo localPackageInfo = (PackageInfo)((Iterator)localObject).next();
          if ((paramBoolean) || ((localPackageInfo.applicationInfo.flags & 0x1) != 1))
          {
            AmApp localAmApp = new AmApp();
            localAmApp.c(localPackageInfo.applicationInfo.loadLabel(paramPackageManager).toString());
            localAmApp.b(localPackageInfo.packageName);
            localAmApp.a(localPackageInfo.versionName);
            localArrayList.add(localAmApp);
            cew.a("ApplicationUtils", "getAllPackages", localAmApp.i() + " is added to myPackages list");
            continue;
            return localArrayList;
          }
        }
      }
      catch (NullPointerException paramPackageManager)
      {
        return localArrayList;
      }
    }
    Collections.sort(localArrayList);
    return localArrayList;
  }
  
  public static void a(Context paramContext, String paramString)
  {
    Intent localIntent = new Intent();
    localIntent.setAction("android.settings.APPLICATION_DETAILS_SETTINGS");
    localIntent.setData(Uri.fromParts("package", paramString, null));
    paramContext.startActivity(localIntent);
  }
  
  public static void a(Context paramContext, AmApp paramAmApp)
  {
    paramContext = (ActivityManager)paramContext.getSystemService("activity");
    Process.sendSignal(paramAmApp.a(), 9);
    Process.killProcess(paramAmApp.a());
    paramContext.killBackgroundProcesses(paramAmApp.g());
  }
  
  public static Drawable b(Context paramContext, String paramString)
  {
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = paramContext.getApplicationIcon(paramString);
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static List<AmApp> b(Context paramContext)
  {
    cew.a("ApplicationUtils", "getRunningProcesses with context parameter only");
    if (paramContext == null) {
      return null;
    }
    return a(paramContext, a(paramContext.getPackageManager(), false));
  }
  
  public static String c(Context paramContext, String paramString)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getString(2131100045);
    try
    {
      paramString = localPackageManager.getApplicationLabel(localPackageManager.getApplicationInfo(paramString, 0)).toString();
      return paramString;
    }
    catch (PackageManager.NameNotFoundException paramString) {}
    return paramContext;
  }
  
  public static void c(Context paramContext)
  {
    String str;
    if (AndroidUtils.b()) {
      str = "http://www.amazon.com/Malwarebytes-Corporation-Anti-Malware/dp/B00GT4V5DM/";
    }
    for (;;)
    {
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.setData(Uri.parse(str));
      paramContext.startActivity(localIntent);
      return;
      if (e(paramContext, "com.android.vending")) {
        str = "https://play.google.com/store/apps/details?id=org.malwarebytes.antimalware";
      } else {
        str = "https://www.malwarebytes.com/mobile/";
      }
    }
  }
  
  public static void d(Context paramContext, String paramString)
  {
    paramContext.startActivity(new Intent("android.intent.action.DELETE", Uri.parse("package:" + paramString)));
  }
  
  public static boolean e(Context paramContext, String paramString)
  {
    try
    {
      paramContext.getPackageManager().getApplicationInfo(paramString, 0);
      return true;
    }
    catch (Exception paramContext) {}
    return false;
  }
  
  public static int f(Context paramContext, String paramString)
  {
    paramContext = bfq.a(paramContext).iterator();
    while (paramContext.hasNext())
    {
      ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)paramContext.next();
      if (localRunningAppProcessInfo.pkgList == null)
      {
        if (paramString.equals(localRunningAppProcessInfo.processName)) {
          return localRunningAppProcessInfo.pid;
        }
      }
      else
      {
        String[] arrayOfString = localRunningAppProcessInfo.pkgList;
        int j = arrayOfString.length;
        int i = 0;
        while (i < j)
        {
          if (paramString.equals(arrayOfString[i])) {
            return localRunningAppProcessInfo.pid;
          }
          i += 1;
        }
      }
    }
    return 0;
  }
}
