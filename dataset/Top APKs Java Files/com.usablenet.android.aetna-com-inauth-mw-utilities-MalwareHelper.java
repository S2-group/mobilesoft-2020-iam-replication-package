package com.inauth.mw.utilities;

import android.app.Application;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import com.inauth.utilities.InAuthUtilities;
import com.inauth.utilities.ndk.InAuthNDK;
import com.inauth.utilities.ndk.NDKLog;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

public class MalwareHelper
{
  private static MalwareHelper instance;
  
  private MalwareHelper() {}
  
  private NDKLog decryptSigfile(String paramString1, String paramString2)
  {
    String str2 = "COMPROMISED";
    int i = 0;
    String str1 = str2;
    if (paramString1 != null)
    {
      paramString1 = InAuthNDK.getInstance().inAuthMW(paramString1);
      int j = InAuthNDK.getInstance().getMalwareReturnCodeNDK();
      i = j;
      str1 = str2;
      if (paramString1 != null)
      {
        str1 = parseSigfile(paramString1, paramString2);
        i = j;
      }
    }
    paramString1 = new NDKLog();
    paramString1.setDecryptedList(str1);
    paramString1.setReasonCode(i);
    return paramString1;
  }
  
  private List<String> findMalwares(Application paramApplication, String paramString)
  {
    paramString = paramString.split("(\\r|\\n)");
    paramApplication = paramApplication.getApplicationContext().getPackageManager().getInstalledPackages(0);
    ArrayList localArrayList = new ArrayList();
    int i = 1;
    while (i < paramString.length)
    {
      String[] arrayOfString = paramString[i].split(";");
      int j = 0;
      if (j < paramApplication.size())
      {
        Object localObject = (PackageInfo)paramApplication.get(j);
        if (((PackageInfo)localObject).packageName.equals(arrayOfString[0]))
        {
          localObject = InAuthUtilities.fileToMD5(((PackageInfo)localObject).applicationInfo.sourceDir);
          if (localObject != null) {
            break label115;
          }
        }
        for (;;)
        {
          j += 1;
          break;
          label115:
          if (((String)localObject).equals(arrayOfString[1])) {
            localArrayList.add(paramString[i]);
          }
        }
      }
      i += 1;
    }
    return localArrayList;
  }
  
  private static InputStream getInputStreamFromUrl(String paramString)
  {
    try
    {
      paramString = new DefaultHttpClient().execute(new HttpGet(paramString)).getEntity().getContent();
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  public static MalwareHelper getInstance()
  {
    if (instance == null) {
      instance = new MalwareHelper();
    }
    return instance;
  }
  
  private JSONObject getValidation(String paramString1, String paramString2, String paramString3, String paramString4)
    throws IOException, JSONException
  {
    paramString4 = null;
    if (new File(paramString1).exists())
    {
      paramString1 = getSigfileVersion(paramString1);
      paramString2 = getInputStreamFromUrl(paramString3 + "/sigfile/status/android?account_guid=" + paramString2 + "&type=malware&version=" + paramString1);
      paramString1 = paramString4;
      if (paramString2 != null)
      {
        paramString1 = null;
        try
        {
          paramString2 = new BufferedReader(new InputStreamReader(paramString2, "UTF-8"));
          paramString1 = paramString2;
        }
        catch (UnsupportedEncodingException paramString2)
        {
          for (;;)
          {
            paramString2.printStackTrace();
          }
        }
        paramString2 = new StringBuilder();
        for (;;)
        {
          paramString3 = paramString1.readLine();
          if (paramString3 == null) {
            break;
          }
          paramString2.append(paramString3);
        }
      }
      try
      {
        paramString1 = new JSONObject(paramString2.toString());
        return paramString1;
      }
      catch (JSONException paramString1)
      {
        return null;
      }
    }
    return null;
  }
  
  private String parseSigfile(String paramString1, String paramString2)
  {
    String str = "";
    String[] arrayOfString1 = paramString1.split("#####");
    String[] arrayOfString2 = arrayOfString1[0].split("(\\r|\\n)");
    paramString1 = str;
    if ("GET_SIGFILE_VERSION".equals(paramString2)) {
      paramString1 = arrayOfString2[0];
    }
    if ("GET_MALWARE_LIST".equals(paramString2)) {
      paramString1 = arrayOfString1[1];
    }
    return paramString1;
  }
  
  public MalwareLog getMalwareLog(Application paramApplication, String paramString)
  {
    String str4 = "COMPROMISED";
    String str3 = "MISSING_SIGFILE";
    ArrayList localArrayList = new ArrayList();
    Object localObject = localArrayList;
    String str2 = str3;
    String str1 = str4;
    if (InAuthUtilities.doesFileExist(paramString))
    {
      NDKLog localNDKLog = decryptSigfile(paramString, "GET_MALWARE_LIST");
      paramString = str3;
      if (localNDKLog != null) {
        paramString = localNDKLog.getReasonCode();
      }
      localObject = localArrayList;
      str2 = paramString;
      str1 = str4;
      if (localNDKLog.getDecryptedList() != null)
      {
        localObject = localArrayList;
        str2 = paramString;
        str1 = str4;
        if (!"COMPROMISED".equals(localNDKLog.getDecryptedList()))
        {
          localObject = findMalwares(paramApplication, localNDKLog.getDecryptedList());
          if ((((List)localObject).size() != 0) || ((!paramString.equals("MISSING_SIGFILE")) && (!paramString.equals("DECRYPTION_FAILURE")))) {
            break label172;
          }
          str1 = "COMPROMISED";
          str2 = paramString;
        }
      }
    }
    for (;;)
    {
      paramApplication = new MalwareLog();
      paramApplication.setMalwareStatus(str1);
      paramApplication.setMalwareReasonCode(str2);
      paramApplication.addMalwareList((List)localObject);
      return paramApplication;
      label172:
      if (((List)localObject).size() == 0)
      {
        str1 = "NO_MALWARE_FOUND";
        str2 = paramString;
      }
      else
      {
        str1 = "MALWARE_FOUND";
        str2 = paramString;
      }
    }
  }
  
  public String getSigfileVersion(String paramString)
  {
    String str2 = "MISSING_SIGFILE";
    String str1 = str2;
    if (InAuthUtilities.doesFileExist(paramString))
    {
      paramString = decryptSigfile(paramString, "GET_SIGFILE_VERSION");
      str1 = str2;
      if ("MISSING_SIGFILE" != null) {
        str1 = paramString.getDecryptedList();
      }
    }
    return str1;
  }
  
  public String updateSignatureFile(String paramString1, String paramString2, String paramString3)
  {
    paramString1 = Executors.newFixedThreadPool(1).submit(new HttpCall(paramString1, paramString2, paramString3));
    try
    {
      paramString1 = (String)paramString1.get();
      return paramString1;
    }
    catch (Exception paramString1) {}
    return "INTERNAL_ERROR";
  }
  
  private class HttpCall
    implements Callable<String>
  {
    private final String accountGUID;
    private final String filePath;
    private final String serverURL;
    private String updateSignatureFileResponse = "INTERNAL_ERROR";
    
    HttpCall(String paramString1, String paramString2, String paramString3)
    {
      this.filePath = paramString1;
      this.accountGUID = paramString2;
      this.serverURL = paramString3;
    }
    
    /* Error */
    public String call()
    {
      // Byte code:
      //   0: aconst_null
      //   1: astore 7
      //   3: aconst_null
      //   4: astore 5
      //   6: aconst_null
      //   7: astore 6
      //   9: aconst_null
      //   10: astore 4
      //   12: aload 6
      //   14: astore_2
      //   15: aload_0
      //   16: getfield 21	com/inauth/mw/utilities/MalwareHelper$HttpCall:this$0	Lcom/inauth/mw/utilities/MalwareHelper;
      //   19: aload_0
      //   20: getfield 30	com/inauth/mw/utilities/MalwareHelper$HttpCall:filePath	Ljava/lang/String;
      //   23: aload_0
      //   24: getfield 32	com/inauth/mw/utilities/MalwareHelper$HttpCall:accountGUID	Ljava/lang/String;
      //   27: aload_0
      //   28: getfield 34	com/inauth/mw/utilities/MalwareHelper$HttpCall:serverURL	Ljava/lang/String;
      //   31: aload_0
      //   32: getfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   35: invokestatic 51	com/inauth/mw/utilities/MalwareHelper:access$000	(Lcom/inauth/mw/utilities/MalwareHelper;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/json/JSONObject;
      //   38: astore 8
      //   40: aload 7
      //   42: astore_3
      //   43: aload 8
      //   45: ifnull +206 -> 251
      //   48: aload 6
      //   50: astore_2
      //   51: aload 8
      //   53: ldc 53
      //   55: invokevirtual 59	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   58: astore 9
      //   60: aload 9
      //   62: ifnull +25 -> 87
      //   65: aload 6
      //   67: astore_2
      //   68: aload 9
      //   70: ldc 61
      //   72: invokevirtual 67	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   75: ifeq +12 -> 87
      //   78: aload 6
      //   80: astore_2
      //   81: aload_0
      //   82: ldc 69
      //   84: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   87: aload 7
      //   89: astore_3
      //   90: aload 9
      //   92: ifnull +159 -> 251
      //   95: aload 7
      //   97: astore_3
      //   98: aload 6
      //   100: astore_2
      //   101: aload 9
      //   103: ldc 71
      //   105: invokevirtual 67	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   108: ifeq +143 -> 251
      //   111: aload 6
      //   113: astore_2
      //   114: aload 8
      //   116: ldc 73
      //   118: invokevirtual 59	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   121: invokestatic 77	com/inauth/mw/utilities/MalwareHelper:access$100	(Ljava/lang/String;)Ljava/io/InputStream;
      //   124: astore_3
      //   125: aload_3
      //   126: ifnull +150 -> 276
      //   129: aload 6
      //   131: astore_2
      //   132: new 79	java/io/BufferedInputStream
      //   135: dup
      //   136: aload_3
      //   137: invokespecial 82	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
      //   140: astore_3
      //   141: aload 6
      //   143: astore_2
      //   144: new 84	org/apache/http/util/ByteArrayBuffer
      //   147: dup
      //   148: sipush 5000
      //   151: invokespecial 87	org/apache/http/util/ByteArrayBuffer:<init>	(I)V
      //   154: astore 7
      //   156: aload 6
      //   158: astore_2
      //   159: aload_3
      //   160: invokevirtual 91	java/io/BufferedInputStream:read	()I
      //   163: istore_1
      //   164: iload_1
      //   165: iconst_m1
      //   166: if_icmpeq +55 -> 221
      //   169: aload 6
      //   171: astore_2
      //   172: aload 7
      //   174: iload_1
      //   175: i2b
      //   176: invokevirtual 94	org/apache/http/util/ByteArrayBuffer:append	(I)V
      //   179: goto -23 -> 156
      //   182: astore_2
      //   183: aload 4
      //   185: astore_3
      //   186: aload_2
      //   187: astore 4
      //   189: aload_3
      //   190: astore_2
      //   191: aload_0
      //   192: ldc 26
      //   194: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   197: aload_3
      //   198: astore_2
      //   199: aload 4
      //   201: invokevirtual 97	java/io/IOException:printStackTrace	()V
      //   204: aload_3
      //   205: ifnull +11 -> 216
      //   208: aload_3
      //   209: invokevirtual 102	java/io/FileOutputStream:flush	()V
      //   212: aload_3
      //   213: invokevirtual 105	java/io/FileOutputStream:close	()V
      //   216: aload_0
      //   217: getfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   220: areturn
      //   221: aload 6
      //   223: astore_2
      //   224: new 99	java/io/FileOutputStream
      //   227: dup
      //   228: aload_0
      //   229: getfield 30	com/inauth/mw/utilities/MalwareHelper$HttpCall:filePath	Ljava/lang/String;
      //   232: invokespecial 108	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
      //   235: astore_3
      //   236: aload_3
      //   237: aload 7
      //   239: invokevirtual 112	org/apache/http/util/ByteArrayBuffer:toByteArray	()[B
      //   242: invokevirtual 116	java/io/FileOutputStream:write	([B)V
      //   245: aload_0
      //   246: ldc 118
      //   248: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   251: aload_3
      //   252: ifnull -36 -> 216
      //   255: aload_3
      //   256: invokevirtual 102	java/io/FileOutputStream:flush	()V
      //   259: aload_3
      //   260: invokevirtual 105	java/io/FileOutputStream:close	()V
      //   263: goto -47 -> 216
      //   266: astore_2
      //   267: aload_0
      //   268: ldc 26
      //   270: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   273: goto -57 -> 216
      //   276: aload 6
      //   278: astore_2
      //   279: aload_0
      //   280: ldc 26
      //   282: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   285: aload 7
      //   287: astore_3
      //   288: goto -37 -> 251
      //   291: astore 4
      //   293: aload 5
      //   295: astore_3
      //   296: aload_3
      //   297: astore_2
      //   298: aload_0
      //   299: ldc 26
      //   301: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   304: aload_3
      //   305: astore_2
      //   306: aload 4
      //   308: invokevirtual 119	org/json/JSONException:printStackTrace	()V
      //   311: aload_3
      //   312: ifnull -96 -> 216
      //   315: aload_3
      //   316: invokevirtual 102	java/io/FileOutputStream:flush	()V
      //   319: aload_3
      //   320: invokevirtual 105	java/io/FileOutputStream:close	()V
      //   323: goto -107 -> 216
      //   326: astore_2
      //   327: aload_0
      //   328: ldc 26
      //   330: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   333: goto -117 -> 216
      //   336: astore_2
      //   337: aload_0
      //   338: ldc 26
      //   340: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   343: goto -127 -> 216
      //   346: astore_3
      //   347: aload_2
      //   348: ifnull +11 -> 359
      //   351: aload_2
      //   352: invokevirtual 102	java/io/FileOutputStream:flush	()V
      //   355: aload_2
      //   356: invokevirtual 105	java/io/FileOutputStream:close	()V
      //   359: aload_3
      //   360: athrow
      //   361: astore_2
      //   362: aload_0
      //   363: ldc 26
      //   365: putfield 28	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   368: goto -9 -> 359
      //   371: astore 4
      //   373: aload_3
      //   374: astore_2
      //   375: aload 4
      //   377: astore_3
      //   378: goto -31 -> 347
      //   381: astore 4
      //   383: goto -87 -> 296
      //   386: astore 4
      //   388: goto -199 -> 189
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	391	0	this	HttpCall
      //   163	12	1	i	int
      //   14	158	2	localObject1	Object
      //   182	5	2	localIOException1	IOException
      //   190	34	2	localObject2	Object
      //   266	1	2	localException1	Exception
      //   278	28	2	localObject3	Object
      //   326	1	2	localException2	Exception
      //   336	20	2	localException3	Exception
      //   361	1	2	localException4	Exception
      //   374	1	2	localObject4	Object
      //   42	278	3	localObject5	Object
      //   346	28	3	localObject6	Object
      //   377	1	3	localObject7	Object
      //   10	190	4	localObject8	Object
      //   291	16	4	localJSONException1	JSONException
      //   371	5	4	localObject9	Object
      //   381	1	4	localJSONException2	JSONException
      //   386	1	4	localIOException2	IOException
      //   4	290	5	localObject10	Object
      //   7	270	6	localObject11	Object
      //   1	285	7	localByteArrayBuffer	org.apache.http.util.ByteArrayBuffer
      //   38	77	8	localJSONObject	JSONObject
      //   58	44	9	str	String
      // Exception table:
      //   from	to	target	type
      //   15	40	182	java/io/IOException
      //   51	60	182	java/io/IOException
      //   68	78	182	java/io/IOException
      //   81	87	182	java/io/IOException
      //   101	111	182	java/io/IOException
      //   114	125	182	java/io/IOException
      //   132	141	182	java/io/IOException
      //   144	156	182	java/io/IOException
      //   159	164	182	java/io/IOException
      //   172	179	182	java/io/IOException
      //   224	236	182	java/io/IOException
      //   279	285	182	java/io/IOException
      //   255	263	266	java/lang/Exception
      //   15	40	291	org/json/JSONException
      //   51	60	291	org/json/JSONException
      //   68	78	291	org/json/JSONException
      //   81	87	291	org/json/JSONException
      //   101	111	291	org/json/JSONException
      //   114	125	291	org/json/JSONException
      //   132	141	291	org/json/JSONException
      //   144	156	291	org/json/JSONException
      //   159	164	291	org/json/JSONException
      //   172	179	291	org/json/JSONException
      //   224	236	291	org/json/JSONException
      //   279	285	291	org/json/JSONException
      //   315	323	326	java/lang/Exception
      //   208	216	336	java/lang/Exception
      //   15	40	346	finally
      //   51	60	346	finally
      //   68	78	346	finally
      //   81	87	346	finally
      //   101	111	346	finally
      //   114	125	346	finally
      //   132	141	346	finally
      //   144	156	346	finally
      //   159	164	346	finally
      //   172	179	346	finally
      //   191	197	346	finally
      //   199	204	346	finally
      //   224	236	346	finally
      //   279	285	346	finally
      //   298	304	346	finally
      //   306	311	346	finally
      //   351	359	361	java/lang/Exception
      //   236	251	371	finally
      //   236	251	381	org/json/JSONException
      //   236	251	386	java/io/IOException
    }
  }
}
